package br.com.caelum.vraptor.html;

import javax.annotation.PostConstruct;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import br.com.caelum.vraptor.ioc.ApplicationScoped;
import br.com.caelum.vraptor.ioc.Component;
import br.com.caelum.vraptor.ioc.Container;

/**
 * <p>
 * Factory for implementations of {@link Link}.
 * </p>
 *
 * @author lucascs
 */
@Component
@ApplicationScoped
public class Linker {

	private static Container container;

	private static ThreadLocal<UrlForLink> last = new ThreadLocal<UrlForLink>();

	private static final Logger LOGGER = LoggerFactory.getLogger(Linker.class);

	public Linker(Container container) {
		Linker.container = container;
	}

	/**
	 * <p>
	 * Implemented so that VRaptor creates it at the startup of the application.
	 * Does nothing, except logging.
	 * </p>
	 */
	@PostConstruct
	public void initialize() {
		LOGGER.info("Initializing Linker");
	}

	/**
	 * <p>
	 * Factory method for an {@link UrlForLink}. Creates it and sets a
	 * ThreadLocal static field with it. Intended to be used like
	 * <code>Link link = link(); to(MyController.class).method();</code>
	 * </p>
	 *
	 * @return A fresh new instance of a UrlForLink, not yet configured
	 * @see java.lang.ThreadLocal
	 * @see Linker#to(Class)
	 */
	public static Link link() {
		UrlForLink link = container.instanceFor(UrlForLink.class);
		LOGGER.debug("Building new link; got instance " + link
				+ " from container");
		last.set(link);
		return link;
	}

	/**
	 * <p>
	 * Factory method for a {@link StringLink}.
	 * </p>
	 *
	 * @param url
	 *            The literal URL to be stored in the link
	 * @return A fresh new instance of a {@link StringLink}, ready for use
	 */
	public static Link link(String url) {
		return new StringLink(url);
	}

	/**
	 * <p>
	 * Returns a previously configured {@link UrlForLink}. Intended to be used
	 * like <code>link(to(MyController.class).method())</code> (so the ignored
	 * argument).
	 * </p>
	 *
	 * @param whatever
	 *            Ignored
	 * @return A fresh and (hopefully) configured instance of {@link UrlForLink}
	 * @see Linker#to(Class)
	 */
	public static Link link(Object whatever) {
		UrlForLink link = last.get();
		last.set(null);
		return link;
	}

	/**
	 * <p>
	 * Configures the {@link UrlForLink} stored in the static ThreadLocal field.
	 * If that field is not set, creates a new {@link UrlForLink} first, calling
	 * {@link Linker#link()}.
	 * </p>
	 *
	 * @param <T>
	 *            Type of the controller class
	 * @param controller
	 *            Controller class
	 * @return A proxy of the given controller class, generated by
	 *         {@link UrlForLink#saveLinkTo(Class)}
	 * @see java.lang.ThreadLocal
	 * @see UrlForLink#saveLinkTo(Class)
	 * @see Linker#link()
	 * @see Linker#link(Object)
	 */
	public static <T> T to(Class<T> controller) {
		UrlForLink link = last.get();
		last.set(null);
		if (link == null) {
			link = (UrlForLink) link();
		}

		return link.saveLinkTo(controller);
	}

}
